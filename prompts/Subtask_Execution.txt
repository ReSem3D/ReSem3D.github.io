from task_utils import build_pre_conditions, build_post_conditions, build_costs, mppi_exec

#Query: Pick up the transparent beaker.
pre_conditions = build_pre_conditions("Back to inital pose")
costs = build_costs("Move the end effector to the transparent beaker with default pos/ori weights")
post_conditions = build_post_conditions("Check if the end effector reaches the transparent beaker")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Pick up the horizontal marker.
pre_conditions = build_pre_conditions("Back to inital pose")
costs = build_costs("Move the end effector to the horizontal marker with default pos/ori weights")
post_conditions = build_post_conditions("Check if the end effector reaches the marker")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Place the transparent beaker on the chemical station.
pre_conditions = build_pre_conditions("Check if the transparent beaker is on the end effector")
costs = build_costs("Place the transparent beaker on the chemical station with default pos/ori weights")
post_conditions = build_post_conditions("Check if the transparent beaker on the chemical station")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Raise the stick to a height of 10 cm.
pre_conditions = build_pre_conditions("Check if the stick is on the end effector")
costs = build_costs("Raise the stick to a height of 10 cm with default pos/ori weights")
post_conditions = build_post_conditions("Check if the stick has reached a height of 10 cm")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Move the transparent breaker 20cm above the chemical station.
pre_conditions = build_pre_conditions("Check if the transparent breaker is on the end effector")
costs = build_costs("Move the transparent breaker 20cm above the chemical station with default pos/ori weights")
post_conditions = build_post_conditions("Check if the transparent breaker is 20cm above the chemical station")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Hold the marker vertically at a height of 10 cm.
pre_conditions = build_pre_conditions("Check if the marker is on the end effector")
costs = build_costs("Hold the marker vertically at a height of 10 cm with default pos/ori weights")
post_conditions = build_post_conditions("Check if the marker is vertical, but ignore its height")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Grasp the block.
pre_conditions = build_pre_conditions("Back to inital pose")
costs = build_costs("Move the end effector to the block with default pos/ori weights")
post_conditions = build_post_conditions("Check if the end effector reaches the block")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Please turn on the light.
pre_conditions = build_pre_conditions("Back to inital pose")
costs = build_costs("Move the end effector to the switch with default pos/ori weights")
post_conditions = build_post_conditions("Check if the end effector reaches the switch")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Tip the reagent bottle at a 135° angle, 10 cm above the petri dish.
pre_conditions = build_pre_conditions("Check if the reagent bottle is on the end effector")
costs = build_costs("Tip the reagent bottle at a 135° angle, 10 cm above the petri dish with high pos/ori weights")
post_conditions = build_post_conditions("Check if the reagent bottle is at a 135° angle to the z-axis")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Touch the rocker switch.
pre_conditions = build_pre_conditions("Back to inital pose")
costs = build_costs("Move the end effector to the rocker switch with default pos/ori weights")
post_conditions = build_post_conditions("Check if the end effector reaches the rocker switch")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: hold the towel to its another end
pre_conditions = lambda: True
costs = build_costs("Hold the towel to its another end with default pos/ori weights")
post_conditions = build_post_conditions("Check if the end effector reaches the towel's another end")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Raise the towel to a height of 10 cm.
pre_conditions = lambda: True
costs = build_costs("Raise the towel to a height of 10 cm with default pos/ori weights")
post_conditions = build_post_conditions("Check if the towel has reached a height of 10 cm")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Hold the knife-handle at a height of 10 cm at a 0° angle.
pre_conditions = build_pre_conditions("Check if the knife-handle is on the end effector")
costs = build_costs("Hold the knife-handle at a height of 10 cm at a 0° angle with high pos/ori weights")
post_conditions = build_post_conditions("Check if the y-axis of end effector at a 0° angle to the z-axis")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

# Query: Move the blade to the cake.
pre_conditions = build_pre_conditions("Check if the knife-handle is on the end effector")
costs = build_costs("Move the blade to the cake with default pos/ori weights")
post_conditions = build_post_conditions("Check if the blade reaches the cake")
ret_val = mppi_exec(pre_conditions, costs, post_conditions)

#Query: Open gripper
ret_val = mppi_exec(gripper_command="open")

#Query: Close gripper
ret_val = mppi_exec(gripper_command="close")