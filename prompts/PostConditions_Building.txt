from env_utils import get_ee_pos, compute_pos_diff, compute_vector_diff, get_angle
from perception_utils import parse_keypoints_state

#Query: Check if the transparent beaker on the chemical station.
t_beaker_state = parse_keypoints_state("transparent beaker")
chemical_station_state = parse_keypoints_state("chemical station")
t_beaker_pose = t_beaker_state.get("adjust", t_beaker_state["select"])["move"][-1]()
chemical_station_pose = chemical_station_state.get("adjust", chemical_station_state["select"])["move"][0]()[:] # "move" needs callback ()
ret_val = compute_pos_diff(t_beaker_pose[:3], chemical_station_pose[:3], threshold=0.02)

#Query: Check if the end effector reaches the transparent beaker.
ee_pos = get_ee_pos()
ee_quat = get_ee_quat()
t_beaker_state = parse_keypoints_state("transparent beaker")
t_beaker_pose = t_beaker_state.get("adjust", t_beaker_state["select"])["move"][0]()[:] # "move" needs callback () 
t_beaker_orientation = transform_orientation(name="breaker", xyzw=t_beaker_pose[3:], convention='xyz', angle=None, type="object")
pos_diff = compute_pos_diff(ee_pos, t_beaker_pose[:3], threshold=0.008)
ori_diff = compute_orientation_diff(ee_quat, t_beaker_orientation, threshold=0.8)
ret_val = pos_diff and ori_diff

#Query: Check if the stick has reached a height of 10 cm.
ee_pos = get_ee_pos()
stick_state = parse_keypoints_state("stick")
stick_pose = stick_state.get("adjust", stick_state["select"])["init"][0][:]
stick_pose[2] += 0.1
ret_val = compute_pos_diff(ee_pos[2], stick_pose[2], threshold=0.008)

#Query: Check if the marker is vertical, but ignore its height.
ee_pos = get_ee_pos()
marker_state = parse_keypoints_state("marker")
marker_pose_adj, marker_pose_sel = marker_state.get("adjust")["move"][0]()[:], marker_state.get("select")["move"][0]()[:]
marker_vector = np.subtract(marker_pose_sel[:3], marker_pose_adj[:3])
ret_val = compute_vector_diff(marker_vector, axis="z", threshold=30, degree=0, direction='positive')

#Query: Check if the transparent breaker is 20cm above the chemical station.
ee_pos = get_ee_pos()
ee_quat = get_ee_quat()
t_breaker_state = parse_keypoints_state("transparent breaker")
chemical_station_state = parse_keypoints_state("chemical station")
t_breaker_pose = t_breaker_state.get("adjust", t_breaker_state["select"])["move"][0]()[:]
chemical_station_pose = chemical_station_state.get("adjust", chemical_station_state["select"])["move"][0]()[:] # "move" needs callback ()
t_breaker_orientation = transform_orientation(name="breaker", xyzw=t_breaker_pose[3:], convention='xyz', angle=None, type="object")
chemical_station_pose[2] += 0.2
pos_diff = compute_pos_diff(t_breaker_pose[:3], chemical_station_pose[:3], threshold=0.02)
ori_diff = compute_orientation_diff(ee_quat, t_breaker_orientation, threshold=0.7)
ret_val = pos_diff and ori_diff

#Query: Check if the reagent bottle is at a 135° angle to the z-axis.
ee_quat = get_ee_quat()
r_bottle_state = parse_keypoints_state("reagent bottle")
r_bottle_pose_adj1, r_bottle_pose_adj2 = r_bottle_state.get("adjust")["move"][0]()[:], r_bottle_state.get("adjust")["move"][-1]()[:]
r_bottle_vector = np.subtract(r_bottle_pose_adj1[:3], r_bottle_pose_adj2[:3])
degree = 135 + get_angle(object_name="reagent bottle", axis="y")
ret_val = compute_vector_diff(r_bottle_vector, axis="z", threshold=30, degree=degree, direction='positive')

#Query:Check if the end effector reaches the towel's another end
ee_pos = get_ee_pos()
ee_quat = get_ee_quat()
towel_state = parse_keypoints_state("towel")
towel_pose = towel_state.get("adjust", towel_state["select"])["init"][-1][:] # "init" doesn't need callback.
towel_orientation = transform_orientation(name="towel", xyzw=towel_pose[3:], convention='xyz', angle=None, type="object")
pos_diff = compute_pos_diff(ee_pos, towel_pose[:3], threshold=0.008)
ori_diff = compute_orientation_diff(ee_quat, towel_orientation, threshold=0.8)
ret_val = pos_diff and ori_diff

#Query:Check if the end effector reaches the towel's another end at a height of 5cm.
ee_pos = get_ee_pos()
ee_quat = get_ee_quat()
towel_state = parse_keypoints_state("towel")
towel_pose = towel_state.get("adjust", towel_state["select"])["init"][-1][:] # "init" doesn't need callback.
towel_pose[2] += 0.05
towel_orientation = transform_orientation(name="towel", xyzw=towel_pose[3:], convention='xyz', angle=None, type="object")
pos_diff = compute_pos_diff(ee_pos, towel_pose[:3], threshold=0.008)
ori_diff = compute_orientation_diff(ee_quat, towel_orientation, threshold=0.8)
ret_val = pos_diff and ori_diff

#Query: Check if the y-axis of end effector at a 0° angle to the z-axis.
ee_wxyz = get_ee_quat()
ee_y_vector = get_ee_axis_vector(ee_wxyz, axis='y')
ret_val = compute_vector_diff(ee_y_vector, axis="z", threshold=20, degree=0, direction='positive')

# Query: Check if the end effector reaches the knife-handle.
ee_pos = get_ee_pos()
ee_quat = get_ee_quat()
knife_state = parse_keypoints_state("knife-handle")
knife_pose = knife_state.get("adjust", knife_state["select"])["init"][0][:] # "init" doesn't need callback.
knife_orientation = transform_orientation(name="knife-handle", xyzw=knife_pose[3:], convention='xyz', angle=None, type="object")
pos_diff = compute_pos_diff(ee_pos, knife_pose[:3], threshold=0.008)
ori_diff = compute_orientation_diff(ee_quat, knife_orientation, threshold=0.8)
ret_val = pos_diff and ori_diff

# Query: Check if the blade reaches the cake.
ee_pos = get_ee_pos()
ee_quat = get_ee_quat()
blade_state = parse_keypoints_state("blade")
cake_state = parse_keypoints_state("cake")
blade_pose = blade_state.get("adjust", blade_state["select"])["move"][-1]()[:] # "move" needs callback ()
cake_pose = cake_state.get("adjust", cake_state["select"])["init"][0][:] # "init" doesn't need callback.
blade_orientation = transform_orientation(name="blade", xyzw=blade_pose[3:], convention='xyz', angle=None, type="object")
pos_diff = compute_pos_diff(ee_pos, cake_pose[:3], threshold=0.008)
ori_diff = compute_orientation_diff(ee_quat, blade_orientation, threshold=0.8)
ret_val = pos_diff and ori_diff

# Query: Check if the towel has reached a height of 5 cm.
ee_pos = get_ee_pos()
towel_state = parse_keypoints_state("towel")
towel_pose = towel_state.get("adjust", towel_state["select"])["init"][0][:] # "init" doesn't need callback.
towel_pose[2] += 0.05
ret_val = compute_pos_diff(ee_pos, towel_pose[:3], threshold=0.008)
